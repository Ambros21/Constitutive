# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- develop

pr:
  branches:
    include:
    - develop

pool:
  vmImage: 'windows-2019'

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  Version: '1.0.$(Build.BuildId)'
  Major: '1'
  Minor: '0'
  Patch: '$(Build.BuildId)'
  testProject: 'tests/MGroup.Multiscale.Tests'

steps:
- task: PowerShell@2
  displayName: Install gitversion.tool
  inputs:
    targetType: inline
    script: dotnet tool install --tool-path .. gitversion.tool
    pwsh: true

- task: PowerShell@2
  displayName: Set SemVer from git history
  inputs:
    targetType: inline
    script: ../dotnet-gitversion /output buildserver
    pwsh: true


# - task: SonarCloudPrepare@1
#   displayName: "Prepares SonarCloud analysis"
#   inputs:
#     SonarCloud: 'SonarCloud'
#     organization: 'mgroupntua'
#     scannerMode: 'MSBuild'
#     projectKey: 'MSolve.Constitutive'
#     extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/coverage/coverage.opencover.xml'


- task: DotNetCoreCLI@2
  name: dotnetBuild
  displayName: "Build projects"
  inputs:
    command: 'build'
    arguments: '--no-restore --nologo -p:Version=$(GitVersion.SemVer)'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'Build.BuildNumber'
    verbosityPack: 'Minimal'
    configuration: '$(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   displayName: Runs Tests (develop)
#   condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
# inputs:
#   command: 'test'
#   projects: '**/*[Tt]ests/*.csproj'
#   arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
#   publishTestResults: true


# - task: SonarCloudAnalyze@1
#   displayName: "Performs SonarCloud Analysis"

# - task: SonarCloudPublish@1
#   displayName: 'Publish Quality Gate Results'
#   inputs:
#     pollingTimeoutSec: '300'

# - task: PublishTestResults@2
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'

# - task: PublishCodeCoverageResults@1
#   inputs:
#     summaryFileLocation: $(Build.SourcesDirectory)/coverage/Cobertura/Cobertura.xml
#     reportDirectory: $(Build.SourcesDirectory)/coverage/Cobertura
#     codecoverageTool: cobertura

- task: DotNetCoreCLI@2
  name: dotnetPack
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: "Packages new nugets"
  inputs:
    command: 'pack'
    arguments: '--nologo --no-build --no-restore'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'GitVersion.SemVer'
    verbosityPack: 'Minimal'

- task: PublishBuildArtifacts@1
  name: publishToFeed
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: "Publishes to pipeline artifacts"
  inputs:
    ArtifactName: 'drop'

- task: DotNetCoreCLI@2
  name: dotnetPushNugetPublic
  condition: ne(variables['Build.Reason'], 'PullRequest')
  displayName: "Push nugets to public feed"
  inputs:
    command: 'push'
    packagesToPush: '$(build.artifactStagingDirectory)/*.nupkg'
    verbosityPack: 'Minimal'
    feedPublish: 'MSolve/MGroup'

- task: DotNetCoreCLI@2
  enabled: false
  condition: ne(variables['Build.Reason'], 'PullRequest')
  name: dotnetPushSymbolPublic
  displayName: "Publishes symbol nugets"
  inputs:
    command: 'push'
    searchPatternPush: '$(Build.ArtifactStagingDirectory)/*.snupkg'
    feedPublish: 'MSolve/MGroup'
